//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import type { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export * as Client from './axios-client/Client';

export * as Query from './axios-client/Query';



//-----Types.File-----
export class AuthenticationResponse implements IAuthenticationResponse {
    token?: string | null;
    expiration?: Date;
    errors?: string[] | null;

    constructor(data?: IAuthenticationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>null;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(item);
            }
        }
    }

    static fromJS(data: any): AuthenticationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["expiration"] = this.expiration && this.expiration.toISOString();
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        return data;
    }
}

export interface IAuthenticationResponse {
    token?: string | null;
    expiration?: Date;
    errors?: string[] | null;
}

export class CreateApiKeyCommand implements ICreateApiKeyCommand {
    name?: string | null;

    constructor(data?: ICreateApiKeyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateApiKeyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateApiKeyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ICreateApiKeyCommand {
    name?: string | null;
}

export class CreateApiKeyCommandDto implements ICreateApiKeyCommandDto {
    id?: string;
    name?: string | null;
    key?: string | null;

    constructor(data?: ICreateApiKeyCommandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.key = _data["key"];
        }
    }

    static fromJS(data: any): CreateApiKeyCommandDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateApiKeyCommandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["key"] = this.key;
        return data;
    }
}

export interface ICreateApiKeyCommandDto {
    id?: string;
    name?: string | null;
    key?: string | null;
}

export class CreateConversionRequest implements ICreateConversionRequest {
    fileContent?: string | null;
    fileName?: string | null;
    convertedFileName?: string | null;
    fileTargetFormat?: TargetFileFormat;

    constructor(data?: ICreateConversionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileContent = _data["fileContent"];
            this.fileName = _data["fileName"];
            this.convertedFileName = _data["convertedFileName"];
            this.fileTargetFormat = _data["fileTargetFormat"];
        }
    }

    static fromJS(data: any): CreateConversionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateConversionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileContent"] = this.fileContent;
        data["fileName"] = this.fileName;
        data["convertedFileName"] = this.convertedFileName;
        data["fileTargetFormat"] = this.fileTargetFormat;
        return data;
    }
}

export interface ICreateConversionRequest {
    fileContent?: string | null;
    fileName?: string | null;
    convertedFileName?: string | null;
    fileTargetFormat?: TargetFileFormat;
}

export class GetConversionQueryDto implements IGetConversionQueryDto {
    id?: string;
    fileName?: string | null;
    convertedFromName?: string | null;
    conversionDate?: Date;
    deletionDate?: Date | null;
    fileFormat?: TargetFileFormat;

    constructor(data?: IGetConversionQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fileName = _data["fileName"];
            this.convertedFromName = _data["convertedFromName"];
            this.conversionDate = _data["conversionDate"] ? new Date(_data["conversionDate"].toString()) : <any>null;
            this.deletionDate = _data["deletionDate"] ? new Date(_data["deletionDate"].toString()) : <any>null;
            this.fileFormat = _data["fileFormat"];
        }
    }

    static fromJS(data: any): GetConversionQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetConversionQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fileName"] = this.fileName;
        data["convertedFromName"] = this.convertedFromName;
        data["conversionDate"] = this.conversionDate && this.conversionDate.toISOString();
        data["deletionDate"] = this.deletionDate && this.deletionDate.toISOString();
        data["fileFormat"] = this.fileFormat;
        return data;
    }
}

export interface IGetConversionQueryDto {
    id?: string;
    fileName?: string | null;
    convertedFromName?: string | null;
    conversionDate?: Date;
    deletionDate?: Date | null;
    fileFormat?: TargetFileFormat;
}

export class LoginCommand implements ILoginCommand {
    email?: string | null;
    password?: string | null;

    constructor(data?: ILoginCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LoginCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginCommand {
    email?: string | null;
    password?: string | null;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;

    [key: string]: any;
}

export class ProfileInfoDto implements IProfileInfoDto {
    userName?: string | null;
    email?: string | null;

    constructor(data?: IProfileInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): ProfileInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["email"] = this.email;
        return data;
    }
}

export interface IProfileInfoDto {
    userName?: string | null;
    email?: string | null;
}

export class RegisterCommand implements IRegisterCommand {
    userName!: string;
    password!: string;
    email!: string;

    constructor(data?: IRegisterCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): RegisterCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["email"] = this.email;
        return data;
    }
}

export interface IRegisterCommand {
    userName: string;
    password: string;
    email: string;
}

export enum TargetFileFormat {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class UpdateProfileInfoCommand implements IUpdateProfileInfoCommand {
    newEmail?: string | null;
    currentPassword?: string | null;
    newPassword?: string | null;

    constructor(data?: IUpdateProfileInfoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.newEmail = _data["newEmail"];
            this.currentPassword = _data["currentPassword"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): UpdateProfileInfoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateProfileInfoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newEmail"] = this.newEmail;
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data;
    }
}

export interface IUpdateProfileInfoCommand {
    newEmail?: string | null;
    currentPassword?: string | null;
    newPassword?: string | null;
}
//-----/CustomTypes.File-----

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

export function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

export function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

//-----/Types.File-----

import { addResultTypeFactory } from './axios-client/helpers';
export { setBaseUrl, getBaseUrl } from './axios-client/helpers';
export { setAxiosFactory, getAxios } from './axios-client/helpers';


//-----PersistorHydrator.File-----
import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { DehydratedState, QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './axios-client/helpers';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
  if (!str || typeof str !== 'string') return str;
  if (!/^\d\d\d\d\-\d\d\-\d\d/.test(str)) return str;
  
  const date = new Date(str);
  const isDate = date instanceof Date && !isNaN(date as any);
  
  return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(queryKey: QueryKey) {
  return queryKey
    // We need to replace `null` with `undefined` in query key, because
    // `undefined` is serialized as `null`.
    // And most probably if we have `null` in QueryKey it actually means `undefined`.
    // We can't keep nulls, because they have a different meaning, and e.g. boolean parameters are not allowed to be null.
    .map(x => (x === null ? undefined : x))
    .map(x => deserializeDate(x));
}

export function deserializeClassesInQueryData(queryKey: QueryKey, data: any) {
  if (!data) {
    return data;
  } else if (typeof data !== 'object') {
    return data;
  } else if ('pages' in data && 'pageParams' in data && Array.isArray(data.pages) && Array.isArray(data.pageParams)) {
    // infinite query
    data.pages = data.pages.map((page:any) => deserializeClassesInQueryData(queryKey, page));
  } else if (Array.isArray(data)) {
    return data.map(elem => constructDtoClass(queryKey, elem));
  } else {
    return constructDtoClass(queryKey, data);
  }
}

/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persisterDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);
  client.clientState.queries.forEach((query) => {
    query.state.data = deserializeClassesInQueryData(query.queryKey, query.state.data);
    query.queryKey = deserializeDatesInQueryKeys(query.queryKey);
  });

  return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = getResultTypeFactory(resultTypeKey);

  if (!data || !constructorFunction)
    return data;

  return constructorFunction(data);
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as unknown as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}

export function initPersister() {
  
  addResultTypeFactory('Client___apiKeyAll', (data: any) => { const result = new CreateApiKeyCommandDto(); result.init(data); return result; });
  addResultTypeFactory('Client___conversionAll', (data: any) => { const result = new GetConversionQueryDto(); result.init(data); return result; });
  addResultTypeFactory('Client___convertionResults', (data: any) => { const result = new GetConversionQueryDto(); result.init(data); return result; });
  addResultTypeFactory('Client___profileGET', (data: any) => { const result = new ProfileInfoDto(); result.init(data); return result; });


}
//-----/PersistorHydrator.File----